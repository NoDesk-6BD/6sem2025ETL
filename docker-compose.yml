services:
  mssql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: nodesk-mssql
    user: root
    env_file: .env.docker
    environment:
      ACCEPT_EULA: "Y"
      MSSQL_SA_PASSWORD: "${MSSQL_PASSWORD}"
      MSSQL_PID: "Express"
      TZ: "${TZ:-UTC}"
    ports:
      - "${MSSQL_PORT_EXPORT}:${MSSQL_PORT}"
    volumes:
      - mssql_data:/var/opt/mssql
    healthcheck:
      test:
        [
          "CMD-SHELL",
          '/opt/mssql-tools18/bin/sqlcmd -C -S localhost -U sa -P "$${MSSQL_PASSWORD}" -Q "SELECT 1"',
        ]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 20s

  sql_import:
    build:
      dockerfile: sqlpackage.Dockerfile
    container_name: nodesk-sql-import
    env_file: .env.docker
    depends_on:
      mssql:
        condition: service_healthy
    volumes:
      - ./docker_bd:/data:ro
    command:
      - /opt/sqlpackage/sqlpackage
      - /Action:Import
      - /SourceFile:/data/backup.bacpac
      - /TargetServerName:${MSSQL_HOST},${MSSQL_PORT}
      - /TargetUser:${MSSQL_USER}
      - /TargetPassword:${MSSQL_PASSWORD}
      - /TargetDatabaseName:${MSSQL_DATABASE}
      - /TargetEncryptConnection:True
      - /TargetTrustServerCertificate:True
    restart: "no"

  mongo:
    image: mongo:8
    container_name: nodesk-mongo
    env_file: .env.docker
    ports:
      - "${MONGO_PORT_EXPORT}:${MONGO_PORT}"
    environment:
      MONGO_INITDB_ROOT_USERNAME: "${MONGO_INITDB_ROOT_USERNAME}"
      MONGO_INITDB_ROOT_PASSWORD: "${MONGO_INITDB_ROOT_PASSWORD}"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'mongosh --quiet --eval "db.adminCommand(''ping'').ok" | grep 1',
        ]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 20s

  etl_critical_projects:
    build:
      context: .
      dockerfile: etl_critical_projects.Dockerfile
    container_name: nodesk-etl-critical-projects
    env_file: .env.docker
    depends_on:
      mongo:
        condition: service_healthy
      sql_import:
        condition: service_completed_successfully
    volumes:
      - ./:/app
      - ./.env.docker:/app/.env:ro
    working_dir: /app
    command: >
      bash -lc "
        python -m nodesk.etl.pipelines.critical_projects --save-mongo
      "
  etl_evolution_chart:
    build:
      context: .
      dockerfile: etl_evolution_chart.Dockerfile
    container_name: nodesk-etl-evolution-chart
    env_file: .env.docker
    depends_on:
      mongo:
        condition: service_healthy
      sql_import:
        condition: service_completed_successfully
    volumes:
      - ./:/app
      - ./.env.docker:/app/.env:ro
    working_dir: /app
    command: >
      bash -lc "
        python -m nodesk.etl.pipelines.evolution_chart --save-mongo
      "


volumes:
  mssql_data:
  mongo_data:
